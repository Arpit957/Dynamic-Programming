class Solution {
    
    private:
    int solve(vector<int>& cost,int n){
        
        //base case
        if(n==0)
            return cost[0];
        
        if(n==1)return cost[1];
        
        int ans = cost[n] + min(solve(cost,n-1) , solve(cost,n-2));
        
        return ans;
    }
    
    //solving by dynamic programmig
    
    int solve2(vector<int>& cost,int n,vector<int>&dp){
        
        //base case
        if(n==0) return cost[0];
        
        if(n==1) return cost[1];
        
        //step 3: agar pehle se hi result nikal liya ho
        if(dp[n]!=-1){
             return dp[n];
        }
        
        //step 2:
        dp[n] = cost[n] + min(solve2(cost,n-1,dp),solve2(cost,n-2,dp));
        return dp[n];
        
    }
    
    //tabulation method
    
    int solve3(vector<int>& cost,int n){
        
        //step1: create the dp vector
        vector<int> dp(n+1);
        
        //step 2: handle base case
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        //step 3 : kaha se kaha tak loop chalana hai
        
        for(int i=2;i<n;i++){
            dp[i] = cost[i] + min(dp[i-1],dp[i-2]);
            
        }
        return min(dp[n-1],dp[n-2]);
    }
    
    //space optimization
    
    int solve4(vector<int>& cost,int n){
        
        int prev1 = cost[0];
        int prev2 = cost[1];
        
        for(int i =2;i<n;i++){
            int curr = min(prev1,prev2) + cost[i];
            prev1 = prev2;
            prev2 = curr;
        }
        
        return min(prev1,prev2);
    }
    
public:
    int minCostClimbingStairs(vector<int>& cost) {
        
        int n = cost.size();
        
      //  int ans = min(solve(cost,n-1),solve(cost,n-2));
        
       // return ans;
        
        //step 1: intilize all with -1
       // vector<int> dp(n+1 ,-1);
         //int  ans = min(solve2(cost,n-1,dp),solve2(cost,n-2,dp));
        //return ans;
        
        //solve 3wala
      //  int n = cost.size();
       // return solve3(cost,n);
        
        
        //space optimization
        return solve4(cost,n);
    }
};
